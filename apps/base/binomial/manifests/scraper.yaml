apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: web-scraper
    app.kubernetes.io/name: food-scraper
    app.kubernetes.io/part-of: food
  name: food-scraper
spec:
  clusterIP: None
  ports:
  - name: http
    port: 80
    targetPort: 8000
  selector:
    app.kubernetes.io/component: web-scraper
    app.kubernetes.io/name: food-scraper
    app.kubernetes.io/part-of: food
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: food-scraper
  labels:
    app.kubernetes.io/component: web-scraper
    app.kubernetes.io/name: food-scraper
    app.kubernetes.io/part-of: food
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/component: web-scraper
      app.kubernetes.io/name: food-scraper
      app.kubernetes.io/part-of: food
  serviceName: food-scraper
  template:
    metadata:
      labels:
        app.kubernetes.io/component: web-scraper
        app.kubernetes.io/name: food-scraper
        app.kubernetes.io/part-of: food
    spec:
      initContainers:
      - name: init
        image: alpine
        command:
        - /bin/sh
        - -c
        - 'mkdir -p /mnt/s3/food && chmod 777 /mnt/s3/food'
        volumeMounts:
        - name: s3
          mountPath: /mnt/s3
      containers:
      - name: food
        image: binomiallabs/food
        command:
        - /bin/sh
        - -c
        - 'until [ -d /data/food ]; do echo "waiting for bucket to be mounted..." && sleep 1; done && /home/binomial/.local/bin/food --log-level=info scrape --url=nats://food.$(NAMESPACE).svc.cluster.local:4222 --raw-dir=/data/food/raw --clean-dir=/data/food/clean'
        ports:
        - containerPort: 8000
          protocol: TCP
        volumeMounts:
        - name: s3
          mountPath: /data
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      - name: s3
        image: cloudposse/goofys
        env:
        - name: MOUNT_DIR
          value: /mnt/s3/food
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3
              key: AWS_SECRET_ACCESS_KEY
        - name: BUCKET
          valueFrom:
            secretKeyRef:
              name: s3
              key: BUCKET
        - name: ENDPOINT
          valueFrom:
            secretKeyRef:
              name: s3
              key: ENDPOINT
        - name: REGION
          valueFrom:
            secretKeyRef:
              name: s3
              key: REGION
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "fusermount -uz $MOUNT_DIR"]
        securityContext:
          # The container has to be privileged in order
          # to use a Bidirectional mount.
          privileged: true
        resources:
          limits:
            squat.ai/fuse: 1
        volumeMounts:
        - name: s3
          mountPath: /mnt/s3
          mountPropagation: Bidirectional
      volumes:
      - name: s3
        emptyDir: {}
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app.kubernetes.io/component: web-scraper
    app.kubernetes.io/name: food-scraper
    app.kubernetes.io/part-of: food
  name: food-scraper
spec:
  endpoints:
  - interval: 15s
    port: http
  selector:
    matchLabels:
      app.kubernetes.io/component: web-scraper
      app.kubernetes.io/name: food-scraper
      app.kubernetes.io/part-of: food
