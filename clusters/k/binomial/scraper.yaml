apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: food-scraper
  name: food-scraper
  namespace: binomial
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app.kubernetes.io/name: food-scraper
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: food-scraper
  namespace: binomial
  labels:
    app.kubernetes.io/name: food-scraper
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: food-scraper
  serviceName: food-scraper
  template:
    metadata:
      labels:
        app.kubernetes.io/name: food-scraper
    spec:
      # We need an init container to copy the configuration file
      # because rclone requires that the file be writable.
      initContainers:
      - name: config
        image: alpine
        command:
          - cp
        args:
          - -v
          - /in/rclone.conf
          - /out/rclone.conf
        volumeMounts:
        - name: config-in
          mountPath: /in
        - name: config-out
          mountPath: /out
      containers:
      - name: rclone
        image: rclone/rclone
        args:
          - mount
          - 'storage:'
          - /data
          - --config=/etc/rclone/rclone.conf
          - --allow-non-empty
          - --allow-other
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "fusermount -uz /mnt"]
        securityContext:
          # The container has to be privileged in order
          # to use a Bidirectional mount.
          privileged: true
        resources:
          limits:
            squat.ai/fuse: 1
        volumeMounts:
        - name: config-out
          mountPath: /etc/rclone
        - name: data
          mountPath: /data
          mountPropagation: Bidirectional
      - name: food
        image: binomiallabs/food
        command:
        - /bin/sh
        - -c
        - 'until [ -d /data/food ]; do echo "waiting for bucket to be mounted..." && sleep 1; done && /home/binomial/.local/bin/food scrape bbcgoodfood --url=nats://food.binomial.svc.cluster.local:4222 --client-id="$POD_NAME" --cluster-id=food-stan --raw-dir=/data/raw --clean-dir=/data/clean'
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: data
          mountPath: /data
      volumes:
      - name: config-out
        emptyDir: {}
      - name: config-in
        secret:
          secretName: rclone
      - name: data
        emptyDir: {}
