apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
  name: kubernetes-dashboard
---
kind: Service
apiVersion: v1
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: dashboard.k.squat.ai
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
  name: kubernetes-dashboard
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app.kubernetes.io/name: kubernetes-dashboard
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
  name: kubernetes-dashboard-csrf
type: Opaque
data:
  csrf: ""
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
  name: kubernetes-dashboard-key-holder
type: Opaque
---
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
  name: kubernetes-dashboard-settings
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
  name: kubernetes-dashboard
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["kubernetes-dashboard-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
  name: kubernetes-dashboard
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
  name: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
  name: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: default
---
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
  name: kubernetes-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: kubernetes-dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubernetes-dashboard
    spec:
      containers:
      - name: kubernetes-dashboard
        image: kubernetesui/dashboard:v2.0.0
        ports:
        - containerPort: 9090
          protocol: TCP
        args:
        - --namespace=default
        - --enable-insecure-login
        volumeMounts:
        # Create on-disk volume to store exec logs
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
            path: /
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 1001
          runAsGroup: 2001
      - name: proxy
        image: quay.io/oauth2-proxy/oauth2-proxy:v5.1.0-arm64
        args:
        - -http-address=:8080
        - -upstream=http://127.0.0.1:9090
        - -redirect-url=$(REDIRECT_URL)
        - -provider=oidc
        - -oidc-issuer-url=$(ISSUER_URL)
        - -pass-authorization-header=true
        - -skip-provider-button=true
        - -client-id=$(CLIENT_ID)
        - -client-secret=$(CLIENT_SECRET)
        - -cookie-secret=$(COOKIE_SECRET)
        - -cookie-secure=false
        - -email-domain=*
        env:
        - name: REDIRECT_URL
          valueFrom:
            secretKeyRef:
              name: kubernetes-dashboard
              key: REDIRECT_URL
        - name: ISSUER_URL
          valueFrom:
            secretKeyRef:
              name: kubernetes-dashboard
              key: ISSUER_URL
        - name: CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: kubernetes-dashboard
              key: CLIENT_ID
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: kubernetes-dashboard
              key: CLIENT_SECRET
        - name: COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: kubernetes-dashboard
              key: COOKIE_SECRET
        ports:
        - containerPort: 8080
          protocol: TCP
      volumes:
      - name: tmp-volume
        emptyDir: {}
      serviceAccountName: kubernetes-dashboard
      nodeSelector:
        "kubernetes.io/os": linux
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
---
apiVersion: v1
kind: Secret
metadata:
  name: kubernetes-dashboard
stringData:
  REDIRECT_URL: http://dashboard.k.squat.ai/oauth2/callback
  ISSUER_URL: https://squat.eu.auth0.com/
  CLIENT_ID:
  CLIENT_SECRET:
  # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())'
  COOKIE_SECRET:
#---

#kind: Service
#apiVersion: v1
#metadata:
  #labels:
    #k8s-app: dashboard-metrics-scraper
  #name: dashboard-metrics-scraper
  #namespace: kubernetes-dashboard
#spec:
  #ports:
    #- port: 8000
      #targetPort: 8000
  #selector:
    #k8s-app: dashboard-metrics-scraper
#---

#kind: Deployment
#apiVersion: apps/v1
#metadata:
  #labels:
    #k8s-app: dashboard-metrics-scraper
  #name: dashboard-metrics-scraper
  #namespace: kubernetes-dashboard
#spec:
  #replicas: 1
  #revisionHistoryLimit: 10
  #selector:
    #matchLabels:
      #k8s-app: dashboard-metrics-scraper
  #template:
    #metadata:
      #labels:
        #k8s-app: dashboard-metrics-scraper
      #annotations:
        #seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'
    #spec:
      #containers:
        #- name: dashboard-metrics-scraper
          #image: kubernetesui/metrics-scraper:v1.0.4
          #ports:
            #- containerPort: 8000
              #protocol: TCP
          #livenessProbe:
            #httpGet:
              #scheme: HTTP
              #path: /
              #port: 8000
            #initialDelaySeconds: 30
            #timeoutSeconds: 30
          #volumeMounts:
          #- mountPath: /tmp
            #name: tmp-volume
          #securityContext:
            #allowPrivilegeEscalation: false
            #readOnlyRootFilesystem: true
            #runAsUser: 1001
            #runAsGroup: 2001
      #serviceAccountName: kubernetes-dashboard
      #nodeSelector:
        #"kubernetes.io/os": linux
      ## Comment the following tolerations if Dashboard must not be deployed on master
      #tolerations:
        #- key: node-role.kubernetes.io/master
          #effect: NoSchedule
      #volumes:
        #- name: tmp-volume
          #emptyDir: {}
