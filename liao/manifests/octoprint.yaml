apiVersion: v1
kind: ConfigMap
metadata:
  name: octoprint
  labels:
    app.kubernetes.io/name: octoprint
data:
  plugins: https://github.com/tg44/OctoPrint-Prometheus-Exporter/archive/master.zip
  #plugins: https://github.com/tg44/OctoPrint-Prometheus-Exporter/archive/master.zip https://github.com/jneilliii/OctoPrint-BedLevelVisualizer/archive/master.zip
  _default.profile: |
    axes:
      e:
        inverted: false
        speed: 300
      x:
        inverted: false
        speed: 6000
      y:
        inverted: false
        speed: 6000
      z:
        inverted: false
        speed: 200
    color: default
    extruder:
      count: 1
      nozzleDiameter: 0.4
      offsets:
      - - 0.0
        - 0.0
      sharedNozzle: false
    heatedBed: true
    heatedChamber: false
    id: _default
    model: Ender v3 Pro
    name: Ender v3 Pro
    volume:
      custom_box: false
      depth: 220.0
      formFactor: rectangular
      height: 250.0
      origin: lowerleft
      width: 220.0
  config.yaml: |
    accessControl:
      enabled: false
    plugins:
      tracking:
        enabled: false
    printerProfiles:
      default: _default
    serial:
      autoconnect: true
    server:
      firstRun: false
      onlineCheck:
        enabled: true
      pluginBlacklist:
        enabled: true
    temperature:
      profiles:
      - bed: 100
        chamber: null
        extruder: 210
        name: ABS
      - bed: 60
        chamber: null
        extruder: 180
        name: PLA
    webcam:
      snapshot: http://mjpeg.default.svc.cluster.local/jpeg
      stream: http://mjpeg.k.squat.ai/mjpeg
      ffmpeg: /usr/bin/ffmpeg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: octoprint
  labels:
    app.kubernetes.io/name: octoprint
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: octoprint
  template:
    metadata:
      labels:
        app.kubernetes.io/name: octoprint
    spec:
      initContainers:
      - name: install
        image:  nunofgs/octoprint:alpine
        imagePullPolicy: Always
        command:
        - /bin/sh
        - -c
        - --
        args:
        - 'if [ -n "$PLUGINS" ]; then for p in $PLUGINS; do pip install "$p"; done; fi'
        env:
        - name: PLUGINS
          valueFrom:
            configMapKeyRef:
              name: octoprint
              key: plugins
        volumeMounts:
        - mountPath: /root/.octoprint/plugins
          name: plugins
        resources:
          limits:
            cpu: 100m
      containers:
      - name: octoprint
        image:  nunofgs/octoprint:alpine
        imagePullPolicy: Always
        command:
        - /bin/sh
        - -c
        - --
        args:
        - cp /root/.octoprint/config.yaml.base /root/.octoprint/config.yaml;
          /usr/local/bin/octoprint serve --iknowwhatimdoing --host=0.0.0.0
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: OCTOPRINT_PORT
          value: '8080'
        resources:
          limits:
            squat.ai/serial: 1
        volumeMounts:
        - mountPath: /root/.octoprint/config.yaml.base
          name: config
          subPath: config.yaml
        - mountPath: /root/.octoprint/printerProfiles/_default.profile
          name: config
          subPath: _default.profile
        - mountPath: /root/.octoprint/plugins
          name: plugins
      volumes:
      - name: config
        configMap:
          name: octoprint
          items:
          - key: config.yaml
            path: config.yaml
          - key: _default.profile
            path: _default.profile
      - name: plugins
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: octoprint
  annotations:
    external-dns.alpha.kubernetes.io/hostname: octoprint.k.squat.ai
  labels:
    app.kubernetes.io/name: octoprint
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app.kubernetes.io/name: octoprint
